{
	"info": {
		"_postman_id": "63f73d97-6bad-4656-83a0-80f00f5544bf",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20975310"
	},
	"item": [
		{
			"name": "First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Метод запроса - GET\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200.\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Метод запроса - POST\r",
							"// Параметры запроса (ключ-значение) вводим во вкладке Body\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200.\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками).\r",
							"pm.test(\"Check name = Eduard\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Eduard\");\r",
							"});\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками).\r",
							"pm.test(\"Check age = 33\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"33\");\r",
							"});\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками).\r",
							"pm.test(\"Check salary = 3000\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(3000);\r",
							"});\r",
							"// 7. Спарсить request.\r",
							"let reqData = request.data;\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request).\r",
							"pm.test(\"Check name: response = request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(reqData.name);\r",
							"});\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request).\r",
							"pm.test(\"Check age: response = request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(reqData.age);\r",
							"});\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request).\r",
							"pm.test(\"Check salary: response = request\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+reqData.salary);\r",
							"    // \"+\" преобразует строку в число (string to integer).\r",
							"});\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family);\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request).\r",
							"let resp_salary_1_5 = jsonData.family.u_salary_1_5_year;\r",
							"let req_salary_1_5 = reqData.salary * 4;\r",
							"pm.test(\"Salary after 1.5 years = 12000\", function () {\r",
							"    pm.expect(req_salary_1_5).to.eql(resp_salary_1_5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Eduard",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "3000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Метод зароса - GET\r",
							"// Параметры запроса (ключ-значение) вводим во вкладке Params \r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200.\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"// 4. Спарсить request.\r",
							"let reqData = pm.request.url.query.toObject();\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request).\r",
							"pm.test(\"Check name: response = request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(reqData.name);\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request).\r",
							"pm.test(\"Check age: response = request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(reqData.age);\r",
							"});\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request).\r",
							"pm.test(\"Check salary: response = request\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+reqData.salary);\r",
							"    // \"+\" преобразует строку в число (string to integer).\r",
							"});\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family);\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog has a name\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog has a age\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dog's name is Luky\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dog's age = 4\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?age=33&name=Eduard&salary=3000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "age",
							"value": "33"
						},
						{
							"key": "name",
							"value": "Eduard"
						},
						{
							"key": "salary",
							"value": "3000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Метод зароса - GET\r",
							"// Параметры запроса (ключ-значение) вводим во вкладке Params \r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200.\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"// 4. Спарсить request.\r",
							"let reqData = pm.request.url.query.toObject();\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request).\r",
							"pm.test(\"Check name: response = request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(reqData.name);\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request).\r",
							"pm.test(\"Check age: response = request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(+reqData.age);\r",
							"    // \"+\" преобразует строку в число (string to integer).\r",
							"});\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(reqData.salary)\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(jsonData.salary)\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(jsonData.salary[0])\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[1])\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[2])\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request).\r",
							"pm.test(\"Check response salary [0] = request salary\", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.eql+(reqData.salary);\r",
							"});\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request).\r",
							"let req_salary_6000 = reqData.salary * 2;\r",
							"pm.test(\"Check response salary [1] = request salary*2\", function () {\r",
							"    pm.expect(jsonData.salary[1]).to.eql+(req_salary_6000);\r",
							"});\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"let req_salary_9000 = reqData.salary * 3;\r",
							"pm.test(\"Check response salary [2] = request salary*2\", function () {\r",
							"    pm.expect(jsonData.salary[2]).to.eql+(req_salary_6000);\r",
							"});\r",
							"// 15. Создать в окружении переменную name.\r",
							"// 16. Создать в окружении переменную age.\r",
							"// 17. Создать в окружении переменную salary.\r",
							"// В левои меню вкладка Environments -> Create new Environment. \r",
							"// После создания окружения в правом верхнет меню селектор No Environment, выбрать созданное окружение.\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", jsonData.name);\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", jsonData.age);\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", jsonData.salary[0]);\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (let i = 0; i < jsonData.salary.length; i++) {\r",
							"  console.log(\"Element of list from salary \" + jsonData.salary[i]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?age=33&name=Eduard&salary=3000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "age",
							"value": "33"
						},
						{
							"key": "name",
							"value": "Eduard"
						},
						{
							"key": "salary",
							"value": "3000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Метод зароса - POST\r",
							"// Параметры запроса (ключ-значение) вводим во вкладке Body\r",
							"// 1. Вставить параметр salary из окружения в request.\r",
							"// 2. Вставить параметр age из окружения в age.\r",
							"// 3. Вставить параметр name из окружения в name.\r",
							"// Body: {{значение}} - данные подтягиваются из окружения\r",
							"// name - {{name}}\r",
							"// age - {{age}} \r",
							"// salary - {{salary}}\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200.\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"// 7. Спарсить request.\r",
							"let reqData = request.data;\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary.\r",
							"pm.test(\"Check response has the parameter start qa salary\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months.\r",
							"pm.test(\"Check response has the parameter qa salary after 6 months\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months.\r",
							"pm.test(\"Check response has the parameter qa salary after 12 months\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year.\r",
							"pm.test(\"Check response has the parameter qa salary after 1.5 year\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years.\r",
							"pm.test(\"Check response has the parameter qa salary after 3.5 years\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"// 13. Проверить, что json response имеет параметр person.\r",
							"pm.test(\"Check response has the parameter person\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"person\");\r",
							"});\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request).\r",
							"pm.test(\"Check start qa salary = request salary\", () => {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql+(reqData.salary);\r",
							"});\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request).\r",
							"let req_salary_6000 = reqData.salary * 2;\r",
							"pm.test(\"Check qa salary after 6 months = request salary*2\", () => {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql+(req_salary_6000);\r",
							"});\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request).\r",
							"let req_salary_8100 = reqData.salary * 2.7;\r",
							"pm.test(\"Check qa salary after 12 months = request salary*2.7\", () => {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql+(req_salary_8100);\r",
							"});\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request).\r",
							"let req_salary_9900 = reqData.salary * 3.3;\r",
							"pm.test(\"Check qa salary qa salary after 1.5 year = request salary*3.3\", () => {\r",
							"    pm.expect([\"jsonData.qa_salary_after_1.5_year\"]).to.eql+(req_salary_9900);\r",
							"});\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request).\r",
							"let req_salary_11400 = reqData.salary * 3.8;\r",
							"pm.test(\"Check qa salary after 3.5 years = request salary*3.8\", () => {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql+(req_salary_11400);\r",
							"});\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request).\r",
							"pm.test(\"Check 1-st element u_name from person = request salary\", () => {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql+(reqData.salary);\r",
							"});\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request).\r",
							"pm.test(\"Check u age = request age\", () => {\r",
							"    pm.expect(jsonData.u_name).to.eql+(reqData.age);\r",
							"});\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request).\r",
							"let req_salary_12600 = reqData.salary * 4.2;\r",
							"pm.test(\"Check u salary 5 years = request salary*4.2\", () => {\r",
							"    pm.expect(jsonData.u_salary_5_years).to.eql+(req_salary_12600);\r",
							"});\r",
							"// 22. Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (let i = 0; i < jsonData.person.u_name.length; i++) {\r",
							"  console.log(\"Element of list from person \" + jsonData.person.u_name[i]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}